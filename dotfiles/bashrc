# vim:ft=sh

# For better colors in Vim
export TERM=xterm-256color

PS1='\[\033[1;38;5;19m\]\u\[\033[0;38;5;196m\]@\[\033[1;38;5;22m\]\h\[\033[0;38;5;0m\]:\[\033[1;38;5;100m\]\w\[\033[0;38;5;0m\] @ \[\033[1;38;5;19m\]\D{%H:%M:%S}\[\033[1;38;5;88m\]$(__git_ps1) \[\033[0;38;5;22m\]$\[\033[0m\] '

# History length
HISTSIZE=1000
HISTFILESIZE=2000
# Don't put duplicate lines or lines starting with space in the history
HISTCONTROL=ignoreboth
# Prepends time to each command in history
HISTTIMEFORMAT="%d/%m/%y %T "
# Avoids duplicate commands in history
HISTCONTROL=ignoredups:erasedups
# Append to history file, instead of overwriting it
shopt -s histappend
# Updates history after every command
PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND$'\n'}history -a; history -c; history -r"

# Check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
shopt -s globstar

# Make less more friendly for non-text input files
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

alias vim='vim -O'

alias cal='cal -3'

alias cp='cp -i'
alias mv='mv -i'

alias less='less -r'
alias tail='tail -f'

alias list='ls -FhAls --color=never | less -r'
alias ls='ls -F --color=never'

alias untar='tar -zxvf'

# Allows alias checking in watch commands
alias watch='watch '

# Allows resume if it goes south
alias wget='wget -c'

# Docker-related aliases
alias dc='docker-compose'
alias dce='docker-compose exec'
alias dctail='dc logs -ft --tail=1000'
alias dcstop='docker stop $(docker ps --all --quiet)'
alias dcrm='docker rm --force $(docker ps --all --quiet)'

# Add an "alert" alias for long running commands. Use like so:
#     sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Install the git prompt command (__git_ps1) and autocompletions
source ~/.git-prompt.sh
source ~/.git-completion.bash

gpgconf --launch gpg-agent

if ! shopt -oq posix; then
    if [ -f /usr/share/bash-completion/bash_completion ]; then
        . /usr/share/bash-completion/bash_completion
    elif [ -f /etc/bash_completion ]; then
        . /etc/bash_completion
    fi
fi

# Setup pyenv for each interactive shell
eval "$(pyenv init -)"

# Mounts an ISO: mount-iso file.iso dir/
mount-iso() {
    if [[ ! -d "$2" ]]; then
        mkdir "$2"
    fi

    sudo mount -o loop -t iso9660 "$1" "$2"
}

# Unmounts an ISO: unmount-iso dir/
unmount-iso() {
    sudo umount "$1"
    rm -r "$1"
}

# Serves current working dir to your network
# This is a DANGEROUS command, anyone who knows your IP (or is scanning for
# vulnerable IPs and ports on the Internet) could download your data, if you
# provide this with a public interface or 0.0.0.0.
# Use with care.
localserver() {
    RANDOM_PORT=$(( $RANDOM % 16385 + 49152 ))
    ADDR_PORT="${1:-127.0.0.1}:${2:-$RANDOM_PORT}"

    if [[ ! -d /tmp/nginx ]]; then
        mkdir /tmp/nginx
    fi
    \cp ~/.localserver.conf /tmp/nginx/localserver.conf

    echo "Connect to $ADDR_PORT"
    docker run \
        --rm \
        -ti \
        --name localserver \
        -v "$PWD:/usr/share/nginx/html:ro" \
        -v "/tmp/nginx:/copy_on_start:ro" \
        -v "/tmp/nginx-logs:/var/log/nginx" \
        -p "$ADDR_PORT:80" \
        --entrypoint bash \
        nginx:1.15.2 -c "cp /copy_on_start/localserver.conf /etc/nginx/nginx.conf; nginx"

    unset ADDR_PORT
}

# Updates system packages
update() {
    sudo apt-get --allow-releaseinfo-change update
    sudo apt-get -y --allow-downgrades dist-upgrade
    sudo apt-get -y autoremove
    sudo apt-get -y clean
}

# Prints external IP address
get-external-ip() {
    curl ifconfig.me
}

# Fetches a bogus file, printing the current download transfer speed
test-download-speed() {
    wget -O /dev/null http://speedtest.wdc01.softlayer.com/downloads/test500.zip
}

# Get size of directories in current dir
size-dirs() {
    for d in * ; do
        echo "$d:" $(du -ch "$d" 2> /dev/null | tail -1)
    done
}

# Restart a container and follow logs
dcrtail() {
    docker-compose restart $1
    docker-compose logs -ft --tail=1000 $1
}

dcrmiv() {
    # Remove images
    docker image rm $(docker image ls -q)
    # Remove volumes
    docker volume rm $(docker volume ls -q)
}

# Clear Docker environment
docker-clean() {
    dcrm
    docker system prune --force
    dcrmiv
}

# List all Gnome settings
list-gnome-settings() {
    for schema in $(gsettings list-schemas | sort); do
        for key in $(gsettings list-keys $schema | sort); do
            value="$(gsettings get $schema $key | tr "\n" " ")"
            echo "$schema :: $key :: $value"
        done
    done
}

# Show all components of your PATH as a list
show-path() {
    IFS=':' read -ra PARTS <<< "$PATH"
    for part in "${PARTS[@]}"; do
        echo $part
    done
}

# Get a time id
time-id() {
    date +%Y%m%d%H%M%S
}

# Usage: Run until Dec 25th, 2020 @ 2pm
# run-until 20201225140000 "command"
run-until() {
    END=$(expr $1 + 0)
    shift

    while true; do
        CURRENT=$(date +%Y%m%d%H%M%S)

        if [[ $(expr $CURRENT + 0) > $END ]]; then
            break
        fi

        $*
    done
}

# Quality checks for directories or files
# Add .isort.cfg and config.cfg to the project
pyquality() {
    for path in "$@"; do
        black "$path"
        isort "$path"
        flake8 "$path"
    done
}

pyquality-all() {
    find . -name "*.py" -print0 | xargs -0 pyquality
}

pyquality-git() {
    pyquality $(git diff --name-only --cached --diff-filter=d -- '*.py*')
}

# Re-source this file
rdot() {
    source ~/.bashrc
}

# Usage: pdf-remove-password $PASSWORD $IN $OUT
pdf-remove-password() {
    pdftk "$2" input_pw "$1" output "$3"
}

# Usage: encrypt-file $IN $OUT
encrypt-file() {
    openssl enc -aes-256-cbc -md sha512 -pbkdf2 -iter 100000 -salt -in "$1" -out "$2"
}

# Usage: decrypt-file $IN $OUT
decrypt-file() {
    openssl enc -aes-256-cbc -d -md sha512 -pbkdf2 -iter 100000 -salt -in "$1" -out "$2"
}
