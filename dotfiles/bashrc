# vim:ft=sh

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# For better colors in Vim
export TERM=xterm-256color

PS1='\[\033[1;38;5;19m\]\u\[\033[0;38;5;196m\]@\[\033[1;38;5;22m\]\h\[\033[0;38;5;0m\]:\[\033[1;38;5;100m\]\w\[\033[0;38;5;0m\] @ \[\033[1;38;5;19m\]\D{%H:%M:%S}\[\033[1;38;5;88m\]$(__git_ps1) \[\033[0;38;5;22m\]$\[\033[0m\] '

# Sets default editor for various commands
export EDITOR=$(which vim)

# Make grep and other commands show more colors
export GREP_COLORS="fn=37"

# History length
HISTSIZE=1000
HISTFILESIZE=2000
# Don't put duplicate lines or lines starting with space in the history
HISTCONTROL=ignoreboth
# Prepends time to each command in history
export HISTTIMEFORMAT="%d/%m/%y %T "
# Avoids duplicate commands in history
export HISTCONTROL=ignoredups:erasedups
# Append to history file, instead of overwriting it
shopt -s histappend
# Updates history after every command
export PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND$'\n'}history -a; history -c; history -r"

# Check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
shopt -s globstar

# Make less more friendly for non-text input files
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# Set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# Set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        # We have color support; assume it's compliant with ECMA-48
        # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
        # a case would tend to support setf rather than setaf.)
        color_prompt=yes
    else
        color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# Colored GCC warnings and errors
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

alias vim='vim -O'

alias cal='cal -3'

alias cp='cp -i'
alias mv='mv -i'

alias less='less -r'
alias tail='tail -f'

# Proxy to detect MacOS
if [[ "$HOME" == /Users/* ]]; then
    alias list='ls -FhAls | less -r'
    alias ls='ls -F'
else
    alias list='ls -FhAls --color=never | less -r'
    alias ls='ls -F --color=never'
fi

alias untar='tar -zxvf'

# Allows alias checking in watch commands
alias watch='watch '

# Allows resume if it goes south
alias wget='wget -c'

# Docker-related aliases
alias dc='docker-compose'
alias dce='docker-compose exec'
alias dctail='dc logs -ft --tail=1000'
alias dcstop='docker stop $(docker ps --all --quiet)'
alias dcrm='docker rm --force $(docker ps --all --quiet)'

# Add an "alert" alias for long running commands. Use like so:
#     sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Install the git prompt command (__git_ps1) and autocompletions
source ~/.git-prompt.sh
source ~/.git-completion.bash

# Start the GPG Agent
export GPG_TTY=$(tty)
gpgconf --launch gpg-agent

# Make `pip` require a virtualenv
export PIP_REQUIRE_VIRTUALENV=true

# Set up pyenv
export PYENV_ROOT=$HOME/.pyenv
export PATH=$PYENV_ROOT/bin:$PATH
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"

# Enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
    if [ -f /usr/share/bash-completion/bash_completion ]; then
        . /usr/share/bash-completion/bash_completion
    elif [ -f /etc/bash_completion ]; then
        . /etc/bash_completion
    fi
fi

# Mounts an ISO: mount-iso file.iso dir/
mount-iso() {
    if [[ ! -d "$2" ]]; then
        mkdir "$2"
    fi

    sudo mount -o loop -t iso9660 "$1" "$2"
}

# Unmounts an ISO: unmount-iso dir/
unmount-iso() {
    sudo umount "$1"
    rm -r "$1"
}

# Serves current working dir to your network
# This is a DANGEROUS command, anyone who knows your IP (or is scanning for
# vulnerable IPs and ports on the Internet) could download your data, if you
# provide this with a public interface or 0.0.0.0.
# Use with care.
localserver() {
    RANDOM_PORT=$(( $RANDOM % 16385 + 49152 ))
    ADDR_PORT="${1:-127.0.0.1}:${2:-$RANDOM_PORT}"

    if [[ ! -d /tmp/nginx ]]; then
        mkdir /tmp/nginx
    fi
    \cp ~/.localserver.conf /tmp/nginx/localserver.conf

    echo "Connect to $ADDR_PORT"
    docker run \
        --rm \
        -ti \
        --name localserver \
        -v "$PWD:/usr/share/nginx/html:ro" \
        -v "/tmp/nginx:/copy_on_start:ro" \
        -v "/tmp/nginx-logs:/var/log/nginx" \
        -p "$ADDR_PORT:80" \
        --entrypoint bash \
        nginx:1.15.2 -c "cp /copy_on_start/localserver.conf /etc/nginx/nginx.conf; nginx"

    unset ADDR_PORT
}

# Updates system packages
update() {
    sudo apt-get --allow-releaseinfo-change update
    sudo apt-get -y dist-upgrade
    sudo apt-get -y autoremove
    sudo apt-get -y clean
}

# Prints external IP address
get-external-ip() {
    curl ifconfig.co
}

# Fetches a bogus file, printing the current download transfer speed
test-download-speed() {
    wget -O /dev/null http://speedtest.wdc01.softlayer.com/downloads/test500.zip
}

# Get size of directories in current dir
size-dirs() {
    for d in * ; do
        echo "$d:" $(du -ch "$d" 2> /dev/null | tail -1)
    done
}

# Restart a container and follow logs
dcrtail() {
    docker-compose restart $1
    docker-compose logs -ft --tail=1000 $1
}

dcrmaiv() {
    # Remove anonymous images
    docker image rm $(docker image ls -f dangling=true -q)

    # Remove anonymous volumes
    docker volume ls --format '{{.Name}}' |
        grep -E '[0-9a-f]{64}' |
        xargs docker volume rm
}

# Clear Docker environment
docker-clean() {
    dcrm
    docker system prune --force
    dcrmaiv
}

# List all Gnome settings
list-gnome-settings() {
    for schema in $(gsettings list-schemas | sort); do
        for key in $(gsettings list-keys $schema | sort); do
            value="$(gsettings get $schema $key | tr "\n" " ")"
            echo "$schema :: $key :: $value"
        done
    done
}

# Show all components of your PATH as a list
show-path() {
    IFS=':' read -ra PARTS <<< "$PATH"
    for part in "${PARTS[@]}"; do
        echo $part
    done
}

# Get a time id
time-id() {
    date +%Y%m%d%H%M%S
}

# Usage: Run until Dec 25th, 2020 @ 2pm
# run-until 20201225140000 "command"
run-until() {
    END=$(expr $1 + 0)
    shift

    while true; do
        CURRENT=$(date +%Y%m%d%H%M%S)

        if [[ $(expr $CURRENT + 0) > $END ]]; then
            break
        fi

        $*
    done
}

# Quality checks for directories or files
# Add .isort.cfg and config.cfg to the project
pyquality() {
    for path in "$@"; do
        black "$path"
        isort -rc "$path"
        flake8 "$path"
    done
}

pyquality-git() {
    pyquality $(git diff --name-only --cached --diff-filter=d -- '*.py*')
}

# Re-source this file
rdot() {
    source ~/.mybashrc
}

# Remove password from a PDF
# Usage: pdf-remove-password $PASSWORD $IN $OUT
pdf-remove-password() {
    pdftk "$2" input_pw "$1" output "$3"
}

# Usage: encrypt-file $IN $OUT
encrypt-file() {
    openssl enc -aes-256-cbc -md sha512 -pbkdf2 -iter 100000 -salt -in "$1" -out "$2"
}

# Usage: decrypt-file $IN $OUT
decrypt-file() {
    openssl enc -aes-256-cbc -d -md sha512 -pbkdf2 -iter 100000 -salt -in "$1" -out "$2"
}
