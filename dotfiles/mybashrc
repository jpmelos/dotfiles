# vim:ft=sh

# For better colors in Vim.
export TERM=xterm-256color

# Changes command prompt
PS1='\[\033[1;38;5;19m\]\u\[\033[0;38;5;196m\]@\[\033[1;38;5;22m\]\h\[\033[0;38;5;0m\]:\[\033[1;38;5;100m\]\w\[\033[0;38;5;0m\] @ \[\033[1;38;5;19m\]\D{%H:%M:%S}\[\033[1;38;5;88m\]$(__git_ps1) \[\033[0;38;5;22m\]$\[\033[0m\] '

# Sets default editor for various commands
export EDITOR=$(which vim)

# Make grep and other commands show more colors
export GREP_COLORS="fn=37"

# Prepends time to each command in history
export HISTTIMEFORMAT="%d/%m/%y %T "
# Avoids duplicate commands in history
export HISTCONTROL=ignoredups:erasedups
# Append to history file, instead of rewriting it
shopt -s histappend
# Updates history after every command
export PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND$'\n'}history -a; history -c; history -r"

alias vim='vim -O'

alias cal='cal -3'

alias cp='cp -i'
alias mv='mv -i'

alias ngrep='grep --color=always --exclude-dir=.git --binary-files=without-match -InHR'
alias igrep='grep --color=always --exclude-dir=.git --binary-files=without-match -InHiR'

alias less='less -r'
alias tail='tail -f'

alias tmux='tmux attach || tmux'
alias screen='screen -rd || screen'

if [[ "$HOME" == /Users/* ]]; then
    alias list='ls -FhAls | less -r'
    alias ls='ls -F'
else
    alias list='ls -FhAls --color=never | less -r'
    alias ls='ls -F --color=never'
fi

alias untar='tar -zxvf'

# Allows alias checking in watch commands
alias watch='watch '

# Allows resume if it goes south
alias wget='wget -c'

# Docker-related aliases
alias dc='docker-compose'
alias dctail='dc logs -ft'
alias dctail0='dc logs -ft --tail=0'

# Install the git prompt command (__git_ps1) and autocompletions
source ~/.git-prompt.sh
source ~/.git-completion.bash

# Set up pyenv
export PYENV_ROOT=$HOME/.pyenv
export PATH=$PYENV_ROOT/bin:$PATH
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"

# Mounts an ISO: mount-iso file.iso dir/
mount-iso() {
    if [[ ! -d "$2" ]]; then
        mkdir "$2"
    fi

    sudo mount -o loop -t iso9660 "$1" "$2"
}

# Unmounts an ISO: unmount-iso dir/
unmount-iso() {
    sudo umount "$1"
    rm -r "$1"
}

# Runs a command in all submodules of a repository
git-submodules() {
    for repo in $(awk '{print $2}' <(git submodule)); do
        cd ${repo}
        echo "** ${repo}"
        eval $@
        cd .. > /dev/null
    done
}

# Resets the date of the latest commit
git-reset-date() {
    GIT_COMMITTER_DATE="$(date)" git commit --amend --no-edit --date "$(date)"
}

# Serves current working dir to your network
# This is a DANGEROUS command, anyone who knows your IP (or is scanning for
# vulnerable IP and ports on the Internet) could download your data, if you
# provide this with a public interface or 0.0.0.0.
# Use with care.
localserver() {
    RANDOM_PORT=$(( $RANDOM % 16385 + 49152 ))
    ADDR_PORT="${1:-127.0.0.1}:${2:-$RANDOM_PORT}"

    if [[ ! -d /tmp/nginx ]]; then
        mkdir /tmp/nginx
    fi
    \cp ~/.localserver.conf /tmp/nginx/localserver.conf

    echo "Connect to $ADDR_PORT"
    docker run \
        --rm \
        -ti \
        --name localserver \
        -v "$PWD:/usr/share/nginx/html:ro" \
        -v "/tmp/nginx:/copy_on_start:ro" \
        -v "/tmp/nginx-logs:/var/log/nginx" \
        -p "$ADDR_PORT:80" \
        --entrypoint bash \
        nginx:1.15.2 -c "cp /copy_on_start/localserver.conf /etc/nginx/nginx.conf; nginx"

    unset ADDR_PORT
}

# Runs a command and show all files modified by it in the current directory,
# comparing date of last modification. So, there might be false positives,
# but still a pretty good idea.
supervise() {
    NOW="$(date "+%F %T.%N")"
    sleep 1
    $@
    find . -newermt "$NOW"
}

# Updates system packages
update() {
    sudo apt-get --allow-releaseinfo-change update
    sudo apt-get -y dist-upgrade
    sudo apt-get -y autoremove
    sudo apt-get -y clean
}

# Prints external IP address
get-external-ip() {
    curl ifconfig.co
}

# Fetches a bogus file, printing the current download transfer speed
test-download-speed() {
    wget -O /dev/null http://speedtest.wdc01.softlayer.com/downloads/test500.zip
}

# Get size of directories in current dir
size-dirs() {
    for d in * ; do
        echo "$d:" $(du -ch "$d" 2> /dev/null | tail -1)
    done
}

# Clear Docker environment
docker-clean() {
    docker system prune -a --volumes
}

# List all Gnome settings
list-gnome-settings() {
    for schema in $(gsettings list-schemas | sort); do
        for key in $(gsettings list-keys $schema | sort); do
            value="$(gsettings get $schema $key | tr "\n" " ")"
            echo "$schema :: $key :: $value"
        done
    done
}

# Get a time id
time-id() {
    date +%Y%m%d%H%M%S
}

# Starts VPN and disables any traffic not using it
start-vpn() {
    sudo killswitch up ${@:-vpn}
    sudo wg-quick up ${@:-vpn}
}

# Stops VPN and enables all traffic
stop-vpn() {
    sudo wg-quick down ${@:-vpn}
    sudo killswitch down ${@:-vpn}
}

# Show all components of your PATH as a list
show-path() {
    IFS=':' read -ra PARTS <<< "$PATH"
    for part in "${PARTS[@]}"; do
        echo $part
    done
}

# Usage: run-until TIME-ID "command"
run-until() {
    END=$(expr $1 + 0)
    shift

    while true; do
        CURRENT=$(date +%Y%m%d%H%M%S)

        if [[ $(expr $CURRENT + 0) > $END ]]; then
            break
        fi

        $*
    done
}

# Commands to make debugging against MySQL easier.
# Assumes user and password are root, which is good enough for
# local development of most applications

# Common use cases:
# - mysql_queries | grep -E "(INSERT|DELETE|insert|delete)" > out.sql; mysql_truncate_queries

mysql_set_log() {
    mysql -h db -u root -proot -e "SET GLOBAL GENERAL_LOG = 1"
    mysql -h db -u root -proot -e "SET GLOBAL LOG_OUTPUT = 'TABLE'"
}

mysql_queries() {
    mysql -h db -u root -proot -e "SELECT * FROM mysql.general_log WHERE command_type = 'Query' AND LOWER(argument) NOT LIKE '%general_log%' AND LOWER(argument) NOT LIKE '%version_comment%' \G"
}

mysql_truncate_queries() {
    mysql -h db -u root -proot -e "TRUNCATE TABLE mysql.general_log"
}

# Quality checks for directories or files
# Add .isort.cfg and config.cfg to the project
# Common use case:
# - find . -name '*.py' -exec pyquality {} \;
pyquality() {
    for path in "$@"; do
        black "$path"
        isort -rc "$path"
        flake8 "$path"
    done
}

pyquality-commit() {
    pyquality $(git shfh | grep \\.py)
}

# Re-source this file
rdot() {
    source ~/.mybashrc
}
