# vim:ft=sh

# For better colors in Vim.
export TERM=xterm-256color

# Changes command prompt
PS1='\[\e[1;96m\]\u\[\e[1;31m\]@\[\e[1;32m\]\h:\[\e[1;93m\]\w \[\e[0m\]@ \[\e[1;36m\]\D{%H:%M:%S}\[\e[91m\]$(__git_ps1) \[\e[1;32m\]\$\[\e[0m\] '

# Sets default editor for various commands
export EDITOR=$(which vim)

# Make grep and other commands show more colors
export GREP_COLORS="fn=37"

# Prepends time to each command in history
export HISTTIMEFORMAT="%d/%m/%y %T "
# Avoids duplicate commands in history
export HISTCONTROL=ignoredups:erasedups
# Append to history file, instead of rewriting it
shopt -s histappend
# Updates history after every command
export PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND$'\n'}history -a; history -c; history -r"

alias vim='vim -O'

alias cal='cal -3'

alias cp='cp -i'
alias mv='mv -i'

alias dc='docker-compose'

alias ngrep='grep --color=always --exclude-dir=.git --binary-files=without-match -InHR'
alias igrep='grep --color=always --exclude-dir=.git --binary-files=without-match -InHiR'

alias less='less -r'
alias tail='tail -f'

alias tmux='tmux attach || tmux'
alias screen='screen -rd || screen'

alias list='ls -FhAls --color=never | less -r'
alias ls='ls -F --color=never'
# We are going to use $HOME =~ ^/Users.* as a nice heuristic to detect MacOS.
if [[ $HOME =~ ^/Users.* ]]; then
    alias list='ls -FhAls | less -r'
    alias ls='ls -F'
fi

# Install the git prompt command (__git_ps1) and autocompletions
source ~/.git-prompt.sh
source ~/.git-completion.bash

# Create ~/bin, so we can put executables there and not need to restart the terminal
mkdir -p ~/bin

# Set up pyenv
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"

# Shows git diff, excluding deleted files.
git-dico() {
    git diff $(git status -s --porcelain | \grep -v "^ D" | cut -b4-)
}

# Runs a command in all submodules of a repository
git-submodules() {
    for repo in $(awk '{print $2}' <(git submodule)); do
        cd ${repo}
        echo "** ${repo}"
        eval $@
        cd .. > /dev/null
    done
}

# Serves current working dir to your network
# This is a DANGEROUS command, anyone who knows your IP (or is scanning for
# vulnerable IP and ports on the Internet) could download your data, if you
# provide this with a public interface or 0.0.0.0.
# Use with care.
localserver() {
    RANDOM_PORT=$(( $RANDOM % 16385 + 49152 ))
    ADDR_PORT="${1:-127.0.0.1}:${2:-$RANDOM_PORT}"

    if [[ ! -d /tmp/nginx ]]; then
        mkdir /tmp/nginx
    fi
    cp ~/.localserver.conf /tmp/nginx/localserver.conf

    docker pull nginx:1.15.2

    echo "Connect to $ADDR_PORT"
    docker run \
        --rm \
        -ti \
        --name localserver \
        -v "$PWD:/usr/share/nginx/html:ro" \
        -v "/tmp/nginx:/copy_on_start:ro" \
        -v "/tmp/nginx-logs:/var/log/nginx" \
        -p "$ADDR_PORT:80" \
        --entrypoint bash \
        nginx:1.15.2 -c "cp /copy_on_start/localserver.conf /etc/nginx/nginx.conf; nginx"

    unset ADDR_PORT
}

# Runs a command and show all files modified by it in the current directory,
# comparing date of last modification. So, there might be false positives,
# but still a pretty good idea.
supervise() {
    NOW="$(date "+%F %T.%N")"
    sleep 1
    $@
    find . -newermt "$NOW"
}

# Return the running distro
detect-os() {
    echo $(. /etc/os-release; echo $NAME)
}

# Updates system packages
update() {
    if [[ $(detect-os) == "Ubuntu" ]]; then
        sudo apt-get update
        sudo apt-get -y dist-upgrade
        sudo apt-get -y autoremove
    elif [[ $(detect-os) == "Fedora" ]]; then
        sudo dnf upgrade --refresh
    fi
}

# Prints external IP address
get-external-ip() {
    curl ifconfig.co
}

# Fetches a bogus file, printing the current download transfer speed
test-download-speed() {
    wget -O /dev/null http://speedtest.wdc01.softlayer.com/downloads/test500.zip
}

# Get size of directories in current dir
size-dirs() {
    for d in * ; do
        echo "$d:" $(du -ch "$d" 2> /dev/null | tail -1)
    done
}

# Clear Docker environment in respect to currently running containers
docker-clean() {
    docker rm $(docker ps -aq)
    docker rmi $(docker images -aq)
    docker volume rm $(docker volume ls -q)
}

# List all Gnome settings
list-gnome-settings() {
    for schema in $(gsettings list-schemas | sort); do
        for key in $(gsettings list-keys $schema | sort); do
            value="$(gsettings get $schema $key | tr "\n" " ")"
            echo "$schema :: $key :: $value"
        done
    done
}

# Disables any traffic not using your VPN
start-stealth() {
    cd $HOME/vpns/${@:-default}
    bash start_vpn.sh
    cd - > /dev/null 2> /dev/null
}

# Activates your VPN
vpn-client() {
    cd $HOME/vpns/${@:-default}
    sudo openvpn --mute-replay-warnings --config conf.conf
    cd - > /dev/null 2> /dev/null
}

# Allows traffic through your ISP again
end-stealth() {
    cd $HOME/vpns/${@:-default}
    bash stop_vpn.sh
    cd - > /dev/null 2> /dev/null
}

# To use a VPN, do:
# $ start-stealth <vpn-name>
# $ vpn-client <vpn-name>
# $ end-stealth <vpn-name>
# Leave off <vpn-name> if using the VPN named "default"
