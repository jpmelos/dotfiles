# vim: set ft=bash :

if [ -n "$AUTOENV_CLOSE_CLOSEIO" ]; then
    return
fi

AUTOENV_CLOSE_CLOSEIO=1

source .venv/bin/activate

if [ -z "$REMOTE_DEBUG_ROOT" ]; then
    export REMOTE_DEBUG_ROOT="/home/closeio/closeio"
fi

if [ -z "$REMOTE_DEBUG_HOST_PORT" ]; then
    export REMOTE_DEBUG_HOST_PORT="localhost:27027"
fi

############
#          #
#    fh    #
#          #
############

FH_HELP="fh -> This help."

if type fh > /dev/null 2>&1; then
    echo ".autoenv.enter: Would overwrite fh, did not"
else
    AUTOENV_CLOSE_CLOSEIO_FH=1

    fh() {  # help
        echo -e "$FH_HELP"
    }
fi

############
#          #
#    fr    #
#          #
############

FH_HELP="$FH_HELP\nfr -> Install all requirements."

if type fr > /dev/null 2>&1; then
    echo ".autoenv.enter: Would overwrite fr, did not"
else
    AUTOENV_CLOSE_CLOSEIO_FR=1

    fr() {  # requirements
        pip install -r requirements/requirements-pip.txt \
        && pip install -r requirements/requirements.txt \
        && pip install -r requirements/requirements.private \
        && pip install -r requirements/requirements-dev.txt \
        && pip install -r requirements/requirements-lint.txt \
        && pip install -r requirements/requirements-test.txt \
        && pip install -r requirements/requirements-deploy-notifications.txt
    }
fi

############
#          #
#    fl    #
#          #
############

FH_HELP="$FH_HELP\nfl -> Set up the local environment."

if type fl > /dev/null 2>&1; then
    echo ".autoenv.enter: Would overwrite fl, did not"
else
    AUTOENV_CLOSE_CLOSEIO_FL=1

    fl() {  # local
        (
            cd ../devtools \
            && git pull \
            && docker rm -f $(docker ps -aq) \
            && docker volume rm devtools_redis6_data \
            && docker volume rm devtools_redis7_data \
            && bin/login \
            && docker-compose pull --include-deps core closeio_shell \
            && docker-compose up -d core closeio_shell \
            && docker-compose logs -f --tail 1000 closeio_api
        )
    }
fi

############
#          #
#    fq    #
#          #
############

FH_HELP="$FH_HELP\nfq -> Run quality checks."

if type fq > /dev/null 2>&1; then
    echo ".autoenv.enter: Would overwrite fq, did not"
else
    AUTOENV_CLOSE_CLOSEIO_FQ=1

    fq() {  # quality
        (
            cd ../devtools \
            && docker-compose exec closeio_shell ruff check --fix . \
            && docker-compose exec closeio_shell black . \
            && docker-compose exec closeio_shell ruff check . \
            && docker-compose exec closeio_shell black --check . \
            && docker-compose exec closeio_shell dmypy run
        )
    }
fi

############
#          #
#    ft    #
#          #
############

FH_HELP="$FH_HELP\nft -> Run tests."

if type ft > /dev/null 2>&1; then
    echo ".autoenv.enter: Would overwrite ft, did not"
else
    AUTOENV_CLOSE_CLOSEIO_FT=1

    ft() {  # test
        (
            cd ../devtools \
            && docker-compose run --rm --name testing closeio_shell \
                pytest -vv $@
        )
    }
fi

#############
#           #
#    ftd    #
#           #
#############

FH_HELP="$FH_HELP\nftd -> Run tests in debug mode."

if type ftd > /dev/null 2>&1; then
    echo ".autoenv.enter: Would overwrite ftd, did not"
else
    AUTOENV_CLOSE_CLOSEIO_FTD=1

    ftd() {  # test debug
        (
            cd ../devtools \
            && docker-compose run --rm --name testing -p 27027:27027 \
                closeio_shell python -Xfrozen_modules=off -m \
                    debugpy --listen 0.0.0.0:27027 --wait-for-client -m \
                        pytest -vv $@
        )
    }
fi

##############
#            #
#    ftdl    #
#            #
##############

FH_HELP="$FH_HELP\nftdl -> Run tests in debug mode, loop."

if type ftdl > /dev/null 2>&1; then
    echo ".autoenv.enter: Would overwrite ftdl, did not"
else
    AUTOENV_CLOSE_CLOSEIO_FTDL=1

    ftdl() {  # test debug loop
        while true; do \
            ftd $@; \
            sleep 1; \
        done
    }
fi

#############
#           #
#    fgr    #
#           #
#############

FH_HELP="$FH_HELP\nfgr -> Regenerate the GraphQL snapshots."

if type fgr > /dev/null 2>&1; then
    echo ".autoenv.enter: Would overwrite fgr, did not"
else
    AUTOENV_CLOSE_CLOSEIO_FGR=1

    fgr() {  # graphql
        (
            cd ../devtools \
            && docker-compose run --rm --name testing closeio_shell pytest
                -vv --overwrite-snapshots \
                tests/common/graphql/test_schema.py \
                tests/admin/graphql/test_schema.py
        )
    }
fi

#############
#           #
#    fls    #
#           #
#############

FH_HELP="$FH_HELP\nfls -> Enter the local shell."

if type fls > /dev/null 2>&1; then
    echo ".autoenv.enter: Would overwrite fls, did not"
else
    AUTOENV_CLOSE_CLOSEIO_FLS=1

    fls() {  # local shell
        (
            cd ../devtools \
            && docker-compose exec closeio_shell bash
        )
    }
fi

#############
#           #
#    flp    #
#           #
#############

FH_HELP="$FH_HELP\nflp -> Enter the local Python REPL."

if type flp > /dev/null 2>&1; then
    echo ".autoenv.enter: Would overwrite flp, did not"
else
    AUTOENV_CLOSE_CLOSEIO_FLP=1

    flp() {  # local python
        (
            cd ../devtools \
            && docker-compose exec closeio_shell python manage.py shell
        )
    }
fi

#############
#           #
#    fps    #
#           #
#############

FH_HELP="$FH_HELP\nfps -> Enter production shell."

if type fps > /dev/null 2>&1; then
    echo ".autoenv.enter: Would overwrite fps, did not"
else
    AUTOENV_CLOSE_CLOSEIO_FPS=1

    fps() {  # production shell
        python scripts/remote-shell --keep-alive bash $@
    }
fi

#############
#           #
#    fpp    #
#           #
#############

FH_HELP="$FH_HELP\nfpp -> Enter production Python REPL."

if type fpp > /dev/null 2>&1; then
    echo ".autoenv.enter: Would overwrite fpp, did not"
else
    AUTOENV_CLOSE_CLOSEIO_FPP=1

    fpp() {  # production Python
        python scripts/remote-shell --keep-alive python manage.py shell $@
    }
fi
